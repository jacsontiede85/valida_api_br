"""
Middleware de autentica√ß√£o para o SaaS
"""
import os
import jwt
from datetime import datetime
from fastapi import HTTPException, Depends, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from typing import Optional
import structlog
from supabase import create_client, Client
from dotenv import load_dotenv
from api.middleware.mock_auth import get_mock_auth

# Carregar vari√°veis de ambiente
load_dotenv()

logger = structlog.get_logger("auth_middleware")

# Configura√ß√£o JWT
JWT_SECRET = os.getenv("JWT_SECRET", "valida-jwt-secret-2024")
JWT_ALGORITHM = "HS256"

# Configura√ß√£o do Supabase
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_ANON_KEY = os.getenv("SUPABASE_ANON_KEY")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_ROLE_KEY")

# Cliente Supabase - usar SERVICE_ROLE_KEY para opera√ß√µes administrativas
supabase_client: Optional[Client] = None
if SUPABASE_URL and SUPABASE_SERVICE_KEY:
    try:
        supabase_client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)
        logger.info("Cliente Supabase configurado com SERVICE_ROLE_KEY")
    except Exception as e:
        logger.error(f"Erro ao configurar Supabase: {e}")
        supabase_client = None
elif SUPABASE_URL and SUPABASE_ANON_KEY:
    try:
        supabase_client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)
        logger.info("Cliente Supabase configurado com ANON_KEY")
    except Exception as e:
        logger.error(f"Erro ao configurar Supabase: {e}")
        supabase_client = None
else:
    logger.warning("Vari√°veis de ambiente do Supabase n√£o configuradas - usando modo mock")

# Esquema de autentica√ß√£o
security = HTTPBearer(auto_error=False)

class AuthUser:
    def __init__(self, user_id: str, email: str, api_key: Optional[str] = None):
        self.user_id = user_id
        self.email = email
        self.api_key = api_key

def verify_jwt_token(token: str) -> Optional[dict]:
    """
    Verifica um token JWT gerado pelo nosso sistema
    """
    try:
        logger.info(f"üîç Verificando JWT token: {token[:30]}...")
        payload = jwt.decode(token, JWT_SECRET, algorithms=[JWT_ALGORITHM])
        logger.info(f"‚úÖ JWT v√°lido para usu√°rio: {payload.get('email')}")
        
        # Verificar se o token n√£o expirou
        exp = payload.get("exp")
        if exp and datetime.fromtimestamp(exp) < datetime.utcnow():
            logger.warning("‚ùå Token JWT expirado")
            return None
            
        return payload
    except jwt.ExpiredSignatureError:
        logger.warning("‚ùå Token JWT expirado")
        return None
    except jwt.InvalidTokenError as e:
        logger.warning(f"‚ùå Token JWT inv√°lido: {e}")
        return None

async def get_current_user(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> Optional[AuthUser]:
    """
    Obt√©m o usu√°rio atual baseado no token JWT ou API key
    """
    if not credentials:
        logger.warning("‚ùå Nenhuma credencial fornecida")
        return None
    
    token = credentials.credentials
    logger.info(f"üîç Token recebido: {token[:30]}...")
    
    # Primeiro, tentar verificar como nosso JWT
    jwt_payload = verify_jwt_token(token)
    if jwt_payload:
        logger.info(f"‚úÖ Usu√°rio autenticado via JWT: {jwt_payload.get('email')}")
        
        # Buscar API key ativa do usu√°rio para logging
        active_api_key = None
        if supabase_client:
            try:
                from api.services.api_key_service import api_key_service
                user_api_keys = await api_key_service.get_user_api_keys(jwt_payload.get("user_id"))
                active_keys = [k for k in user_api_keys if k.is_active]
                if active_keys:
                    active_api_key = active_keys[0].key  # Usar a primeira API key ativa
                    logger.info(f"API key ativa encontrada para usu√°rio: {active_api_key[:8]}****")
            except Exception as e:
                logger.warning(f"Erro ao buscar API key do usu√°rio: {e}")
        
        return AuthUser(
            user_id=jwt_payload.get("user_id"),
            email=jwt_payload.get("email"),
            api_key=active_api_key
        )
    
    # Verificar se √© uma API key
    if token.startswith("rcp_"):
        if not supabase_client:
            logger.warning("Supabase n√£o configurado, usando modo mock para API key")
            mock_auth = get_mock_auth()
            result = mock_auth.get_user_by_api_key(token)
            if result and result[0] and result[1]:
                user_data, api_key_data = result
                return AuthUser(
                    user_id=user_data["id"],
                    email=user_data["email"],
                    api_key=token
                )
            else:
                raise HTTPException(status_code=401, detail="API key inv√°lida")
        
        # Buscar usu√°rio pela API key no Supabase
        try:
            # Calcular o hash da chave vis√≠vel para buscar no banco
            import hashlib
            key_hash = hashlib.sha256(token.encode()).hexdigest()
            logger.info(f"Buscando API key com hash: {key_hash}")
            
            result = supabase_client.table("api_keys").select(
                "id, user_id, name, is_active, users(id, email, name)"
            ).eq("key_hash", key_hash).execute()
            
            logger.info(f"Resultado da busca: {len(result.data)} chaves encontradas")
            
            if result.data and len(result.data) > 0:
                api_key_data = result.data[0]
                if api_key_data["is_active"]:
                    user_data = api_key_data["users"]
                    return AuthUser(
                        user_id=api_key_data["user_id"],
                        email=user_data["email"],
                        api_key=token
                    )
                else:
                    raise HTTPException(status_code=401, detail="API key inativa")
            else:
                raise HTTPException(status_code=401, detail="API key n√£o encontrada")
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"Erro ao verificar API key: {e}")
            raise HTTPException(status_code=401, detail="Erro interno na verifica√ß√£o da API key")
    
    # Se n√£o foi JWT nem API key, token inv√°lido
    logger.warning(f"‚ùå Token n√£o reconhecido como JWT ou API key v√°lida: {token[:20]}...")
    logger.warning(f"   Token completo: {token}")
    raise HTTPException(status_code=401, detail="Token inv√°lido")

async def require_auth(user: Optional[AuthUser] = Depends(get_current_user)) -> AuthUser:
    """
    Requer autentica√ß√£o obrigat√≥ria
    """
    if not user:
        raise HTTPException(status_code=401, detail="Autentica√ß√£o necess√°ria")
    return user

async def require_api_key(user: Optional[AuthUser] = Depends(get_current_user)) -> AuthUser:
    """
    Requer API key v√°lida
    """
    if not user or not user.api_key:
        raise HTTPException(status_code=401, detail="API key necess√°ria")
    return user

async def validate_jwt_or_api_key(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(security)
) -> AuthUser:
    """
    Valida tanto tokens JWT (sess√£o web) quanto API keys (integra√ß√£o externa)
    Para uso em endpoints que precisam funcionar tanto no frontend quanto via API externa
    """
    if not credentials:
        raise HTTPException(
            status_code=401, 
            detail={"error": "http_error", "message": "Autentica√ß√£o necess√°ria", "path": "/api/v1/cnpj/consult", "status_code": 401, "timestamp": datetime.now().isoformat()}
        )
    
    token = credentials.credentials
    logger.info(f"üîç Validando token h√≠brido: {token[:10]}...")
    
    # Primeiro, tentar como token JWT (para frontend)
    jwt_payload = verify_jwt_token(token)
    if jwt_payload:
        logger.info(f"‚úÖ Usu√°rio autenticado via JWT: {jwt_payload.get('email')}")
        
        # Buscar API key ativa do usu√°rio para logging
        active_api_key = None
        if supabase_client:
            try:
                from api.services.api_key_service import api_key_service
                user_api_keys = await api_key_service.get_user_api_keys(jwt_payload.get("user_id"))
                active_keys = [k for k in user_api_keys if k.is_active]
                if active_keys:
                    active_api_key = active_keys[0].key  # Usar a primeira API key ativa
                    logger.info(f"API key ativa encontrada para usu√°rio: {active_api_key[:8]}****")
            except Exception as e:
                logger.warning(f"Erro ao buscar API key do usu√°rio: {e}")
        
        return AuthUser(
            user_id=jwt_payload.get("user_id"),
            email=jwt_payload.get("email"),
            api_key=active_api_key
        )
    
    # Se n√£o √© JWT, tentar como API key (para integra√ß√£o externa)
    if token.startswith("rcp_"):
        logger.info(f"üîë Tentando validar como API key: {token[:10]}...")
        
        if not supabase_client:
            logger.warning("Supabase n√£o configurado, usando modo mock para API key")
            mock_auth = get_mock_auth()
            result = mock_auth.get_user_by_api_key(token)
            if result and result[0] and result[1]:
                user_data, api_key_data = result
                return AuthUser(
                    user_id=user_data["id"],
                    email=user_data["email"],
                    api_key=token
                )
            else:
                raise HTTPException(
                    status_code=401, 
                    detail={"error": "http_error", "message": "Autentica√ß√£o necess√°ria", "path": "/api/v1/cnpj/consult", "status_code": 401, "timestamp": datetime.now().isoformat()}
                )
        
        # Buscar usu√°rio pela API key no Supabase
        try:
            # Calcular o hash da chave vis√≠vel para buscar no banco
            import hashlib
            key_hash = hashlib.sha256(token.encode()).hexdigest()
            logger.info(f"Buscando API key com hash: {key_hash[:16]}...")
            
            result = supabase_client.table("api_keys").select(
                "id, user_id, name, is_active, users(id, email, name)"
            ).eq("key_hash", key_hash).execute()
            
            logger.info(f"Resultado da busca: {len(result.data)} chaves encontradas")
            
            if result.data and len(result.data) > 0:
                api_key_data = result.data[0]
                if api_key_data["is_active"]:
                    user_data = api_key_data["users"]
                    logger.info(f"‚úÖ API key v√°lida para usu√°rio: {user_data['email']}")
                    return AuthUser(
                        user_id=api_key_data["user_id"],
                        email=user_data["email"],
                        api_key=token
                    )
                else:
                    logger.warning(f"‚ùå API key inativa: {token[:10]}...")
                    raise HTTPException(
                        status_code=401, 
                        detail={"error": "http_error", "message": "Autentica√ß√£o necess√°ria", "path": "/api/v1/cnpj/consult", "status_code": 401, "timestamp": datetime.now().isoformat()}
                    )
            else:
                logger.warning(f"‚ùå API key n√£o encontrada: {token[:10]}...")
                raise HTTPException(
                    status_code=401, 
                    detail={"error": "http_error", "message": "Autentica√ß√£o necess√°ria", "path": "/api/v1/cnpj/consult", "status_code": 401, "timestamp": datetime.now().isoformat()}
                )
        except HTTPException:
            raise
        except Exception as e:
            logger.error(f"Erro ao verificar API key: {e}")
            raise HTTPException(
                status_code=401, 
                detail={"error": "http_error", "message": "Autentica√ß√£o necess√°ria", "path": "/api/v1/cnpj/consult", "status_code": 401, "timestamp": datetime.now().isoformat()}
            )
    
    # Se n√£o √© JWT nem API key v√°lida, erro
    logger.warning(f"‚ùå Token n√£o √© JWT nem API key v√°lida: {token[:20]}...")
    raise HTTPException(
        status_code=401, 
        detail={"error": "http_error", "message": "Autentica√ß√£o necess√°ria", "path": "/api/v1/cnpj/consult", "status_code": 401, "timestamp": datetime.now().isoformat()}
    )

def get_supabase_client() -> Optional[Client]:
    """
    Retorna o cliente Supabase configurado
    """
    return supabase_client

async def get_current_user_optional(request: Request) -> Optional[AuthUser]:
    """
    Obt√©m o usu√°rio atual de forma opcional (n√£o obrigat√≥ria)
    Usado para p√°ginas que podem mostrar conte√∫do personalizado se autenticado
    """
    try:
        # Tentar extrair token do Authorization header
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            # Tentar cookie de sess√£o se n√£o houver header
            # Primeiro tentar auth_token (JWT), depois session_token (legacy)
            auth_token = request.cookies.get("auth_token")
            session_token = request.cookies.get("session_token")
            
            if auth_token:
                auth_header = f"Bearer {auth_token}"
            elif session_token:
                auth_header = f"Bearer {session_token}"
            else:
                return None
        
        # Simular HTTPAuthorizationCredentials
        token = auth_header.replace("Bearer ", "")
        credentials = HTTPAuthorizationCredentials(
            scheme="Bearer",
            credentials=token
        )
        
        # Usar a fun√ß√£o existente get_current_user
        user = await get_current_user(credentials)
        return user
        
    except HTTPException:
        # Se autentica√ß√£o falhar, retornar None ao inv√©s de erro
        return None
    except Exception as e:
        logger.warning(f"Erro ao obter usu√°rio opcional: {e}")
        return None
