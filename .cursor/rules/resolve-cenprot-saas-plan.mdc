---
alwaysApply: false
---
# Plano de Ação - SaaS Valida (valida.api.br)

## Visão Geral

**Objetivo**: Transformar a API Valida em uma plataforma SaaS completa com sistema de usuários, assinaturas recorrentes, dashboard web e controle de acesso via API keys.

## Análise dos Templates Existentes

### Templates Identificados:
1. **home.html** - Dashboard principal com métricas e gráficos
2. **api-keys.html** - Gerenciamento de chaves de API
3. **assinatura.html** - Planos de assinatura e faturamento
4. **faturas.html** - Histórico de faturas
5. **history.html** - Histórico de uso da API
6. **perfil.html** - Perfil do usuário

### Problemas Identificados:
- ❌ Navegação entre templates não funcional (links vazios)
- ❌ Títulos inconsistentes ("Stitch Design" vs "Valida")
- ❌ Layouts diferentes entre templates
- ❌ Falta de integração com backend
- ❌ Dados estáticos (não dinâmicos)

## Fase 1: Estruturação e Navegação

### 1.1 Padronização dos Templates
- [ ] Unificar títulos para "Valida - [Página]"
- [ ] Padronizar layout de sidebar em todos os templates
- [ ] Criar componente de navegação reutilizável
- [ ] Implementar sistema de roteamento

### 1.2 Navegação Funcional
- [ ] Implementar links funcionais entre todas as páginas
- [ ] Adicionar indicador de página ativa na sidebar
- [ ] Criar breadcrumbs para navegação
- [ ] Implementar sistema de autenticação básico

### 1.3 Estrutura de Rotas
```python
# Rotas principais do SaaS
/dashboard          # home.html
/api-keys          # api-keys.html  
/assinatura        # assinatura.html
/faturas           # faturas.html
/history           # history.html
/perfil            # perfil.html
/login             # Página de login
/register          # Página de registro
```

## Fase 2: Integração com Backend

### 2.1 Sistema de Autenticação
- [ ] Integração com Supabase Auth
- [ ] Implementar JWT tokens
- [ ] Sistema de sessões
- [ ] Middleware de autenticação

### 2.2 Modelos de Dados (Supabase)
```sql
-- Tabelas principais
users (id, email, name, created_at, updated_at)
subscriptions (id, user_id, plan_id, status, created_at)
api_keys (id, user_id, key_hash, name, status, created_at)
usage_logs (id, user_id, api_key_id, endpoint, credits_used, created_at)
invoices (id, user_id, amount, status, due_date, created_at)
```

### 2.3 APIs Backend
- [ ] `/api/auth/*` - Autenticação
- [ ] `/api/users/*` - Gestão de usuários
- [ ] `/api/subscriptions/*` - Assinaturas
- [ ] `/api/api-keys/*` - Chaves de API
- [ ] `/api/usage/*` - Histórico de uso
- [ ] `/api/billing/*` - Faturamento

## Fase 3: Funcionalidades Dinâmicas

### 3.1 Dashboard (home.html)
- [ ] Métricas em tempo real
- [ ] Gráficos de uso da API
- [ ] Status do sistema
- [ ] Notificações

### 3.2 Gerenciamento de API Keys (api-keys.html)
- [ ] Gerar novas chaves
- [ ] Revogar/reativar chaves
- [ ] Histórico de uso por chave
- [ ] Rate limiting por chave

### 3.3 Assinaturas (assinatura.html)
- [ ] Planos dinâmicos do banco
- [ ] Upgrade/downgrade de planos
- [ ] Integração com Stripe
- [ ] Webhooks de pagamento

### 3.4 Faturamento (faturas.html)
- [ ] Faturas reais do Stripe
- [ ] Download de PDFs
- [ ] Histórico completo
- [ ] Filtros e busca

### 3.5 Histórico de Uso (history.html)
- [ ] Logs reais de API
- [ ] Filtros avançados
- [ ] Exportação de dados
- [ ] Paginação

### 3.6 Perfil (perfil.html)
- [ ] Edição de dados pessoais
- [ ] Alteração de senha
- [ ] Configurações de notificação
- [ ] 2FA

## Fase 4: Integração com API Existente

### 4.1 Middleware de API Keys
- [ ] Validação de chaves em todas as rotas
- [ ] Rate limiting baseado no plano
- [ ] Logging de uso
- [ ] Bloqueio por limite excedido

### 4.2 Preservação da API Atual
- [ ] Manter compatibilidade com endpoints existentes
- [ ] Adicionar autenticação opcional
- [ ] Versionamento da API
- [ ] Documentação atualizada

## Fase 5: Melhorias de UX/UI

### 5.1 Design System
- [ ] Componentes reutilizáveis
- [ ] Tema consistente
- [ ] Responsividade
- [ ] Acessibilidade

### 5.2 Funcionalidades Avançadas
- [ ] Busca global (Ctrl+K)
- [ ] Notificações em tempo real
- [ ] Dark/Light mode
- [ ] PWA capabilities

## Fase 6: Monitoramento e Analytics

### 6.1 Métricas de Negócio
- [ ] MRR (Monthly Recurring Revenue)
- [ ] Churn rate
- [ ] Usage patterns
- [ ] Customer health score

### 6.2 Monitoramento Técnico
- [ ] Performance da API
- [ ] Uptime monitoring
- [ ] Error tracking
- [ ] Log aggregation

## Cronograma de Implementação

### Semana 1-2: Fase 1
- Padronização dos templates
- Navegação funcional
- Estrutura de rotas

### Semana 3-4: Fase 2
- Integração com Supabase
- Sistema de autenticação
- Modelos de dados

### Semana 5-6: Fase 3
- Funcionalidades dinâmicas
- Integração com APIs
- Testes de integração

### Semana 7-8: Fase 4-5
- Integração com API existente
- Melhorias de UX/UI
- Testes finais

### Semana 9-10: Fase 6
- Monitoramento
- Analytics
- Deploy em produção

## Tecnologias Utilizadas

### Frontend
- HTML5 + TailwindCSS
- JavaScript vanilla (ou Vue.js/React)
- Chart.js para gráficos
- Supabase client

### Backend
- FastAPI (existente)
- Supabase (PostgreSQL + Auth)
- Stripe (pagamentos)
- Python 3.8+

### Infraestrutura
- Supabase (banco + auth)
- Vercel/Netlify (frontend)
- Railway/Render (backend)
- Stripe (pagamentos)

## Próximos Passos Imediatos

1. **Criar estrutura de rotas no run.py**
2. **Padronizar templates com navegação**
3. **Configurar Supabase no projeto**
4. **Implementar autenticação básica**
5. **Criar modelos de dados**

## Métricas de Sucesso

- [ ] 100% dos templates com navegação funcional
- [ ] Sistema de autenticação operacional
- [ ] Integração completa com Supabase
- [ ] API keys funcionando com rate limiting
- [ ] Dashboard com dados reais
- [ ] Sistema de pagamentos operacional
- [ ] 0 downtime na API existente

---

**Status**: Em planejamento
**Prioridade**: Alta
**Estimativa**: 10 semanas
**Responsável**: Equipe de desenvolvimento
